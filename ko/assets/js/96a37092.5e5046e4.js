"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[990],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(t),m=o,g=c["".concat(s,".").concat(m)]||c[m]||d[m]||r;return t?a.createElement(g,i(i({ref:n},u),{},{components:t})):a.createElement(g,i({ref:n},u))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8634:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=t(7462),o=(t(7294),t(3905));const r={title:"Additional Tags",sidebar_position:4},i=void 0,l={unversionedId:"tutorial/tags",id:"tutorial/tags",title:"Additional Tags",description:"typedoc-to-mdx supports these additional tags.",source:"@site/docs/tutorial/tags.md",sourceDirName:"tutorial",slug:"/tutorial/tags",permalink:"/typedoc-to-mdx/ko/docs/tutorial/tags",draft:!1,editUrl:"https://github.com/naver/typedoc-to-mdx/edit/master/demo/docs/docs/tutorial/tags.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Additional Tags",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Setting up Docusaurus",permalink:"/typedoc-to-mdx/ko/docs/setting-up-docusaurus"},next:{title:"i18n",permalink:"/typedoc-to-mdx/ko/docs/tutorial/i18n"}},s={},p=[{value:"@version (=@since)",id:"version-since",level:3},{value:"@category and @group",id:"category-and-group",level:3},{value:"@copy",id:"copy",level:3},{value:"@docid",id:"docid",level:3}],u={toc:p};function c(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"typedoc-to-mdx")," supports these additional tags."),(0,o.kt)("h3",{id:"version-since"},"@version (=@since)"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@version")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"@since")," will add ",(0,o.kt)("strong",{parentName:"p"},'"Since vX.X.X"')," supported version info on your API document.",(0,o.kt)("br",{parentName:"p"}),"\n","Adding this to class/interface/etc typedoc will show which versions this class/.. is supported."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @since 1.0.0\n */\nclass DummyClass\n")),(0,o.kt)("p",null,"And, adding this to member will show which versions this member is supported."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"class DummyClass {\n    /**\n     * This prop is added in version 1.1.0\n     * @since 1.1.0\n     */\n    public propA: string;\n\n    /**\n     * This method is added in version 1.2.0\n     * @since 1.2.0\n     */\n    public methodA(a: number) {\n\n    }\n}\n")),(0,o.kt)("h3",{id:"category-and-group"},"@category and @group"),(0,o.kt)("p",null,"Both are tags supported by TypeDoc.",(0,o.kt)("br",{parentName:"p"}),"\n","Normally, API documents are saved in ",(0,o.kt)("inlineCode",{parentName:"p"},"TYPE_OF_ITEM/ITEM_NAME.mdx"),".",(0,o.kt)("br",{parentName:"p"}),"\n","For example, if there's ",(0,o.kt)("inlineCode",{parentName:"p"},"class A")," with no category and group, its document will be saved as ",(0,o.kt)("inlineCode",{parentName:"p"},"Class/A.mdx"),".",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("inlineCode",{parentName:"p"},"@category")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"@group")," can change this behavior.",(0,o.kt)("br",{parentName:"p"}),"\n","When used, the API document is saved with these rules:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"None of these are used:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"TYPE_OF_ITEM/ITEM_NAME.mdx")))),(0,o.kt)("li",{parentName:"ul"},"Only ",(0,o.kt)("inlineCode",{parentName:"li"},"@group")," is used:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"group_val/ITEM_NAME.mdx")))),(0,o.kt)("li",{parentName:"ul"},"Only ",(0,o.kt)("inlineCode",{parentName:"li"},"@category")," is used:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"category_val/TYPE_OF_ITEM/ITEM_NAME.mdx")))),(0,o.kt)("li",{parentName:"ul"},"Both ",(0,o.kt)("inlineCode",{parentName:"li"},"@category")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"@group")," are used:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"category_val/group_val/ITEM_NAME.mdx"))))),(0,o.kt)("h3",{id:"copy"},"@copy"),(0,o.kt)("p",null,"Copy all comment / tags from other document."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * DESC_OF_A\n * @ko \ud55c\uad6d\uc5b4_\uc124\uba85\n * @example\n * ```js\n * const a = new A();\n * ```\n */\nclass A {\n    /**\n     * DESC_OF_METHOD_A\n     * @see SOMETHING\n     * @returns whatever\n     */\n    methodA() {\n\n    }\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// This will copy all documents of A\n/**\n * @copy A\n */\nclass B {\n    // This will copy all documents of methodA of A\n    /**\n     * @copy A#methodA\n     */\n    methodB() {\n\n    }\n}\n")),(0,o.kt)("h3",{id:"docid"},"@docid"),(0,o.kt)("p",null,"Change the file name of the document.",(0,o.kt)("br",{parentName:"p"}),"\n","As Docusaurus doesn't allow case-sensitive names for documents, this can be used to create different permalink of the document."),(0,o.kt)("p",null,"For example, if there're two global functions with similar names like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"/**\n * Some global function\n */\nfunction SomeGlobalFunction(a: number = 10, b = { foo: 123, bar: 456 }) {\n    return `I'm global, ${a} ${b}`;\n}\n\n/**\n * some global function\n */\nfunction someGlobalFunction(a: number = 10, b = { foo: 123, bar: 456 }) {\n    return `I'm global, ${a} ${b}`;\n}\n")),(0,o.kt)("p",null,"They will be normally saved as:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Function/SomeGlobalFunction.mdx"),(0,o.kt)("li",{parentName:"ul"},"Function/someGlobalFunction-1.mdx")),(0,o.kt)("p",null,"But, the suffix we put (",(0,o.kt)("inlineCode",{parentName:"p"},"-1"),") is not permanent. It's just used for distinguish between documents."),(0,o.kt)("p",null,"Instead, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"@docid")," for creating different file name for the document."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"/**\n * some global function\n * @docid sgf\n */\nfunction someGlobalFunction(a: number = 10, b = { foo: 123, bar: 456 }) {\n    return `I'm global, ${a} ${b}`;\n}\n")),(0,o.kt)("p",null,"The document of the above function will be saved as ",(0,o.kt)("inlineCode",{parentName:"p"},"Function/sgf.mdx"),"."))}c.isMDXComponent=!0}}]);